// *** GENERATED CODE ***
// 2016-05-27 19:14:14 +0000
//
// DO NOT EDIT THIS FILE OR CHANGES WILL BE OVERWRITTEN

extension RouteBuilder {

	public func get(_ p0: String = "/", handler: (Request) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)") { request in
			return try handler(request)
		}
	}

	public func get<T: StringInitializable>(_ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func get(_ p0: String, _ p1: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/\(p1)") { request in
			return try handler(request)
		}
	}

	public func get<T: StringInitializable>(_ p0: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func get<T: StringInitializable>(_ w0: T.Type, _ p0: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func get(_ p0: String, _ p1: String, _ p2: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/\(p1)/\(p2)") { request in
			return try handler(request)
		}
	}

	public func get<T: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/\(p1)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func get<T: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/:w0/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/:w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func get<T: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/\(p0)/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/\(p0)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/:w1/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func get(_ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/\(p1)/\(p2)/\(p3)") { request in
			return try handler(request)
		}
	}

	public func get<T: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/\(p1)/\(p2)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func get<T: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ p2: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/\(p1)/:w0/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/\(p1)/:w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func get<T: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ p2: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/:w0/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/:w0/\(p1)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ p1: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/:w0/:w1/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/:w0/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func get<T: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ p2: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/\(p0)/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/\(p0)/\(p1)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ p1: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/\(p0)/:w1/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/\(p0)/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ p1: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/:w1/\(p0)/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/:w1/\(p0)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p0: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/:w1/:w2/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/:w1/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func get(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ p4: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/\(p1)/\(p2)/\(p3)/\(p4)") { request in
			return try handler(request)
		}
	}

	public func get<T: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/\(p1)/\(p2)/\(p3)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func get<T: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: T.Type, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/\(p1)/\(p2)/:w0/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/\(p1)/\(p2)/:w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func get<T: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ p2: String, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/\(p1)/:w0/\(p2)/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ p2: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/\(p1)/:w0/\(p2)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ w1: U.Type, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/\(p1)/:w0/:w1/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/\(p1)/:w0/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func get<T: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ p2: String, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/:w0/\(p1)/\(p2)/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ p2: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/:w0/\(p1)/\(p2)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ w1: U.Type, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/:w0/\(p1)/:w1/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/:w0/\(p1)/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ p1: String, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/:w0/:w1/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ p1: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/:w0/:w1/\(p1)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/:w0/:w1/:w2/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.get, path: "\(p0)/:w0/:w1/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func get<T: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/\(p0)/\(p1)/\(p2)/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ p2: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/\(p0)/\(p1)/\(p2)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ w1: U.Type, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/\(p0)/\(p1)/:w1/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/\(p0)/\(p1)/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ p1: String, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/\(p0)/:w1/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ p1: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/\(p0)/:w1/\(p1)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ w2: V.Type, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/\(p0)/:w1/:w2/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/\(p0)/:w1/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ p1: String, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/:w1/\(p0)/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ p1: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/:w1/\(p0)/\(p1)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ w2: V.Type, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/:w1/\(p0)/:w2/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/:w1/\(p0)/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p0: String, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/:w1/:w2/\(p0)/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p0: String, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/:w1/:w2/\(p0)/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, _ p0: String, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/:w1/:w2/:w3/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func get<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable, X: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, _ w4: X.Type, handler: (Request, T, U, V, W, X) throws -> ResponseRepresentable) {
		self.add(.get, path: ":w0/:w1/:w2/:w3/:w4") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}
			guard let vw4 = request.parameters["w4"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)
			let ew4 = try X(from: vw4)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}
			guard let cw4 = ew4 else {
				throw Abort.invalidParameter("w4", X.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3, cw4)
		}
	}

	public func post(_ p0: String = "/", handler: (Request) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)") { request in
			return try handler(request)
		}
	}

	public func post<T: StringInitializable>(_ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func post(_ p0: String, _ p1: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/\(p1)") { request in
			return try handler(request)
		}
	}

	public func post<T: StringInitializable>(_ p0: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func post<T: StringInitializable>(_ w0: T.Type, _ p0: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func post(_ p0: String, _ p1: String, _ p2: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/\(p1)/\(p2)") { request in
			return try handler(request)
		}
	}

	public func post<T: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/\(p1)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func post<T: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/:w0/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/:w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func post<T: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/\(p0)/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/\(p0)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/:w1/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func post(_ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/\(p1)/\(p2)/\(p3)") { request in
			return try handler(request)
		}
	}

	public func post<T: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/\(p1)/\(p2)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func post<T: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ p2: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/\(p1)/:w0/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/\(p1)/:w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func post<T: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ p2: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/:w0/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/:w0/\(p1)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ p1: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/:w0/:w1/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/:w0/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func post<T: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ p2: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/\(p0)/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/\(p0)/\(p1)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ p1: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/\(p0)/:w1/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/\(p0)/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ p1: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/:w1/\(p0)/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/:w1/\(p0)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p0: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/:w1/:w2/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/:w1/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func post(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ p4: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/\(p1)/\(p2)/\(p3)/\(p4)") { request in
			return try handler(request)
		}
	}

	public func post<T: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/\(p1)/\(p2)/\(p3)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func post<T: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: T.Type, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/\(p1)/\(p2)/:w0/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/\(p1)/\(p2)/:w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func post<T: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ p2: String, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/\(p1)/:w0/\(p2)/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ p2: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/\(p1)/:w0/\(p2)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ w1: U.Type, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/\(p1)/:w0/:w1/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/\(p1)/:w0/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func post<T: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ p2: String, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/:w0/\(p1)/\(p2)/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ p2: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/:w0/\(p1)/\(p2)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ w1: U.Type, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/:w0/\(p1)/:w1/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/:w0/\(p1)/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ p1: String, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/:w0/:w1/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ p1: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/:w0/:w1/\(p1)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/:w0/:w1/:w2/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.post, path: "\(p0)/:w0/:w1/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func post<T: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/\(p0)/\(p1)/\(p2)/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ p2: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/\(p0)/\(p1)/\(p2)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ w1: U.Type, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/\(p0)/\(p1)/:w1/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/\(p0)/\(p1)/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ p1: String, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/\(p0)/:w1/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ p1: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/\(p0)/:w1/\(p1)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ w2: V.Type, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/\(p0)/:w1/:w2/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/\(p0)/:w1/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ p1: String, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/:w1/\(p0)/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ p1: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/:w1/\(p0)/\(p1)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ w2: V.Type, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/:w1/\(p0)/:w2/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/:w1/\(p0)/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p0: String, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/:w1/:w2/\(p0)/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p0: String, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/:w1/:w2/\(p0)/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, _ p0: String, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/:w1/:w2/:w3/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func post<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable, X: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, _ w4: X.Type, handler: (Request, T, U, V, W, X) throws -> ResponseRepresentable) {
		self.add(.post, path: ":w0/:w1/:w2/:w3/:w4") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}
			guard let vw4 = request.parameters["w4"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)
			let ew4 = try X(from: vw4)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}
			guard let cw4 = ew4 else {
				throw Abort.invalidParameter("w4", X.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3, cw4)
		}
	}

	public func put(_ p0: String = "/", handler: (Request) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)") { request in
			return try handler(request)
		}
	}

	public func put<T: StringInitializable>(_ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func put(_ p0: String, _ p1: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/\(p1)") { request in
			return try handler(request)
		}
	}

	public func put<T: StringInitializable>(_ p0: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func put<T: StringInitializable>(_ w0: T.Type, _ p0: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func put(_ p0: String, _ p1: String, _ p2: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/\(p1)/\(p2)") { request in
			return try handler(request)
		}
	}

	public func put<T: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/\(p1)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func put<T: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/:w0/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/:w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func put<T: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/\(p0)/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/\(p0)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/:w1/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func put(_ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/\(p1)/\(p2)/\(p3)") { request in
			return try handler(request)
		}
	}

	public func put<T: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/\(p1)/\(p2)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func put<T: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ p2: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/\(p1)/:w0/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/\(p1)/:w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func put<T: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ p2: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/:w0/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/:w0/\(p1)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ p1: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/:w0/:w1/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/:w0/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func put<T: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ p2: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/\(p0)/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/\(p0)/\(p1)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ p1: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/\(p0)/:w1/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/\(p0)/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ p1: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/:w1/\(p0)/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/:w1/\(p0)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p0: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/:w1/:w2/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/:w1/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func put(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ p4: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/\(p1)/\(p2)/\(p3)/\(p4)") { request in
			return try handler(request)
		}
	}

	public func put<T: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/\(p1)/\(p2)/\(p3)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func put<T: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: T.Type, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/\(p1)/\(p2)/:w0/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/\(p1)/\(p2)/:w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func put<T: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ p2: String, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/\(p1)/:w0/\(p2)/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ p2: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/\(p1)/:w0/\(p2)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ w1: U.Type, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/\(p1)/:w0/:w1/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/\(p1)/:w0/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func put<T: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ p2: String, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/:w0/\(p1)/\(p2)/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ p2: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/:w0/\(p1)/\(p2)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ w1: U.Type, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/:w0/\(p1)/:w1/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/:w0/\(p1)/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ p1: String, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/:w0/:w1/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ p1: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/:w0/:w1/\(p1)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/:w0/:w1/:w2/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.put, path: "\(p0)/:w0/:w1/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func put<T: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/\(p0)/\(p1)/\(p2)/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ p2: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/\(p0)/\(p1)/\(p2)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ w1: U.Type, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/\(p0)/\(p1)/:w1/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/\(p0)/\(p1)/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ p1: String, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/\(p0)/:w1/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ p1: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/\(p0)/:w1/\(p1)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ w2: V.Type, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/\(p0)/:w1/:w2/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/\(p0)/:w1/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ p1: String, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/:w1/\(p0)/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ p1: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/:w1/\(p0)/\(p1)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ w2: V.Type, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/:w1/\(p0)/:w2/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/:w1/\(p0)/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p0: String, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/:w1/:w2/\(p0)/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p0: String, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/:w1/:w2/\(p0)/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, _ p0: String, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/:w1/:w2/:w3/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func put<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable, X: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, _ w4: X.Type, handler: (Request, T, U, V, W, X) throws -> ResponseRepresentable) {
		self.add(.put, path: ":w0/:w1/:w2/:w3/:w4") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}
			guard let vw4 = request.parameters["w4"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)
			let ew4 = try X(from: vw4)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}
			guard let cw4 = ew4 else {
				throw Abort.invalidParameter("w4", X.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3, cw4)
		}
	}

	public func patch(_ p0: String = "/", handler: (Request) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)") { request in
			return try handler(request)
		}
	}

	public func patch<T: StringInitializable>(_ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func patch(_ p0: String, _ p1: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/\(p1)") { request in
			return try handler(request)
		}
	}

	public func patch<T: StringInitializable>(_ p0: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func patch<T: StringInitializable>(_ w0: T.Type, _ p0: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func patch(_ p0: String, _ p1: String, _ p2: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/\(p1)/\(p2)") { request in
			return try handler(request)
		}
	}

	public func patch<T: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/\(p1)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func patch<T: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/:w0/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/:w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func patch<T: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/\(p0)/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/\(p0)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/:w1/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func patch(_ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/\(p1)/\(p2)/\(p3)") { request in
			return try handler(request)
		}
	}

	public func patch<T: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/\(p1)/\(p2)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func patch<T: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ p2: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/\(p1)/:w0/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/\(p1)/:w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func patch<T: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ p2: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/:w0/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/:w0/\(p1)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ p1: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/:w0/:w1/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/:w0/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func patch<T: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ p2: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/\(p0)/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/\(p0)/\(p1)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ p1: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/\(p0)/:w1/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/\(p0)/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ p1: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/:w1/\(p0)/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/:w1/\(p0)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p0: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/:w1/:w2/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/:w1/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func patch(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ p4: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/\(p1)/\(p2)/\(p3)/\(p4)") { request in
			return try handler(request)
		}
	}

	public func patch<T: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/\(p1)/\(p2)/\(p3)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func patch<T: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: T.Type, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/\(p1)/\(p2)/:w0/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/\(p1)/\(p2)/:w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func patch<T: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ p2: String, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/\(p1)/:w0/\(p2)/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ p2: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/\(p1)/:w0/\(p2)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ w1: U.Type, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/\(p1)/:w0/:w1/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/\(p1)/:w0/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func patch<T: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ p2: String, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/:w0/\(p1)/\(p2)/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ p2: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/:w0/\(p1)/\(p2)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ w1: U.Type, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/:w0/\(p1)/:w1/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/:w0/\(p1)/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ p1: String, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/:w0/:w1/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ p1: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/:w0/:w1/\(p1)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/:w0/:w1/:w2/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.patch, path: "\(p0)/:w0/:w1/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func patch<T: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/\(p0)/\(p1)/\(p2)/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ p2: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/\(p0)/\(p1)/\(p2)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ w1: U.Type, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/\(p0)/\(p1)/:w1/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/\(p0)/\(p1)/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ p1: String, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/\(p0)/:w1/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ p1: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/\(p0)/:w1/\(p1)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ w2: V.Type, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/\(p0)/:w1/:w2/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/\(p0)/:w1/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ p1: String, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/:w1/\(p0)/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ p1: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/:w1/\(p0)/\(p1)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ w2: V.Type, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/:w1/\(p0)/:w2/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/:w1/\(p0)/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p0: String, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/:w1/:w2/\(p0)/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p0: String, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/:w1/:w2/\(p0)/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, _ p0: String, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/:w1/:w2/:w3/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func patch<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable, X: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, _ w4: X.Type, handler: (Request, T, U, V, W, X) throws -> ResponseRepresentable) {
		self.add(.patch, path: ":w0/:w1/:w2/:w3/:w4") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}
			guard let vw4 = request.parameters["w4"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)
			let ew4 = try X(from: vw4)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}
			guard let cw4 = ew4 else {
				throw Abort.invalidParameter("w4", X.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3, cw4)
		}
	}

	public func delete(_ p0: String = "/", handler: (Request) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)") { request in
			return try handler(request)
		}
	}

	public func delete<T: StringInitializable>(_ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func delete(_ p0: String, _ p1: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/\(p1)") { request in
			return try handler(request)
		}
	}

	public func delete<T: StringInitializable>(_ p0: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func delete<T: StringInitializable>(_ w0: T.Type, _ p0: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func delete(_ p0: String, _ p1: String, _ p2: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/\(p1)/\(p2)") { request in
			return try handler(request)
		}
	}

	public func delete<T: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/\(p1)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func delete<T: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/:w0/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/:w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func delete<T: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/\(p0)/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/\(p0)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/:w1/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func delete(_ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/\(p1)/\(p2)/\(p3)") { request in
			return try handler(request)
		}
	}

	public func delete<T: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/\(p1)/\(p2)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func delete<T: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ p2: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/\(p1)/:w0/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/\(p1)/:w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func delete<T: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ p2: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/:w0/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/:w0/\(p1)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ p1: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/:w0/:w1/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/:w0/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func delete<T: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ p2: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/\(p0)/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/\(p0)/\(p1)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ p1: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/\(p0)/:w1/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/\(p0)/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ p1: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/:w1/\(p0)/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/:w1/\(p0)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p0: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/:w1/:w2/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/:w1/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func delete(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ p4: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/\(p1)/\(p2)/\(p3)/\(p4)") { request in
			return try handler(request)
		}
	}

	public func delete<T: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/\(p1)/\(p2)/\(p3)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func delete<T: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: T.Type, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/\(p1)/\(p2)/:w0/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/\(p1)/\(p2)/:w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func delete<T: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ p2: String, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/\(p1)/:w0/\(p2)/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ p2: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/\(p1)/:w0/\(p2)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ w1: U.Type, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/\(p1)/:w0/:w1/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/\(p1)/:w0/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func delete<T: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ p2: String, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/:w0/\(p1)/\(p2)/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ p2: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/:w0/\(p1)/\(p2)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ w1: U.Type, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/:w0/\(p1)/:w1/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/:w0/\(p1)/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ p1: String, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/:w0/:w1/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ p1: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/:w0/:w1/\(p1)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/:w0/:w1/:w2/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.delete, path: "\(p0)/:w0/:w1/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func delete<T: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/\(p0)/\(p1)/\(p2)/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ p2: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/\(p0)/\(p1)/\(p2)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ w1: U.Type, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/\(p0)/\(p1)/:w1/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/\(p0)/\(p1)/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ p1: String, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/\(p0)/:w1/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ p1: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/\(p0)/:w1/\(p1)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ w2: V.Type, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/\(p0)/:w1/:w2/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/\(p0)/:w1/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ p1: String, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/:w1/\(p0)/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ p1: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/:w1/\(p0)/\(p1)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ w2: V.Type, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/:w1/\(p0)/:w2/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/:w1/\(p0)/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p0: String, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/:w1/:w2/\(p0)/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p0: String, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/:w1/:w2/\(p0)/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, _ p0: String, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/:w1/:w2/:w3/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func delete<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable, X: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, _ w4: X.Type, handler: (Request, T, U, V, W, X) throws -> ResponseRepresentable) {
		self.add(.delete, path: ":w0/:w1/:w2/:w3/:w4") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}
			guard let vw4 = request.parameters["w4"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)
			let ew4 = try X(from: vw4)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}
			guard let cw4 = ew4 else {
				throw Abort.invalidParameter("w4", X.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3, cw4)
		}
	}

	public func options(_ p0: String = "/", handler: (Request) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)") { request in
			return try handler(request)
		}
	}

	public func options<T: StringInitializable>(_ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func options(_ p0: String, _ p1: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/\(p1)") { request in
			return try handler(request)
		}
	}

	public func options<T: StringInitializable>(_ p0: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func options<T: StringInitializable>(_ w0: T.Type, _ p0: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func options(_ p0: String, _ p1: String, _ p2: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/\(p1)/\(p2)") { request in
			return try handler(request)
		}
	}

	public func options<T: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/\(p1)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func options<T: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/:w0/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/:w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func options<T: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/\(p0)/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/\(p0)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/:w1/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func options(_ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/\(p1)/\(p2)/\(p3)") { request in
			return try handler(request)
		}
	}

	public func options<T: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/\(p1)/\(p2)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func options<T: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ p2: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/\(p1)/:w0/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/\(p1)/:w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func options<T: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ p2: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/:w0/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/:w0/\(p1)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ p1: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/:w0/:w1/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/:w0/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func options<T: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ p2: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/\(p0)/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/\(p0)/\(p1)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ p1: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/\(p0)/:w1/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/\(p0)/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ p1: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/:w1/\(p0)/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/:w1/\(p0)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p0: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/:w1/:w2/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/:w1/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func options(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ p4: String, handler: (Request) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/\(p1)/\(p2)/\(p3)/\(p4)") { request in
			return try handler(request)
		}
	}

	public func options<T: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ w0: T.Type, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/\(p1)/\(p2)/\(p3)/:w0") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func options<T: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: T.Type, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/\(p1)/\(p2)/:w0/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: T.Type, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/\(p1)/\(p2)/:w0/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func options<T: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ p2: String, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/\(p1)/:w0/\(p2)/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ p2: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/\(p1)/:w0/\(p2)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ w1: U.Type, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/\(p1)/:w0/:w1/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ p1: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/\(p1)/:w0/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func options<T: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ p2: String, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/:w0/\(p1)/\(p2)/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ p2: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/:w0/\(p1)/\(p2)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ w1: U.Type, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/:w0/\(p1)/:w1/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ p1: String, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/:w0/\(p1)/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ p1: String, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/:w0/:w1/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ p1: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/:w0/:w1/\(p1)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/:w0/:w1/:w2/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ p0: String, _ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.options, path: "\(p0)/:w0/:w1/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func options<T: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (Request, T) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/\(p0)/\(p1)/\(p2)/\(p3)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}

			return try handler(request, cw0)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ p2: String, _ w1: U.Type, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/\(p0)/\(p1)/\(p2)/:w1") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ w1: U.Type, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/\(p0)/\(p1)/:w1/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ p1: String, _ w1: U.Type, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/\(p0)/\(p1)/:w1/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ p1: String, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/\(p0)/:w1/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ p1: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/\(p0)/:w1/\(p1)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ w2: V.Type, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/\(p0)/:w1/:w2/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ p0: String, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/\(p0)/:w1/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ p1: String, _ p2: String, handler: (Request, T, U) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/:w1/\(p0)/\(p1)/\(p2)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}

			return try handler(request, cw0, cw1)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ p1: String, _ w2: V.Type, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/:w1/\(p0)/\(p1)/:w2") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ w2: V.Type, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/:w1/\(p0)/:w2/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ p0: String, _ w2: V.Type, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/:w1/\(p0)/:w2/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable, V: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p0: String, _ p1: String, handler: (Request, T, U, V) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/:w1/:w2/\(p0)/\(p1)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}

			return try handler(request, cw0, cw1, cw2)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ p0: String, _ w3: W.Type, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/:w1/:w2/\(p0)/:w3") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, _ p0: String, handler: (Request, T, U, V, W) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/:w1/:w2/:w3/\(p0)") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3)
		}
	}

	public func options<T: StringInitializable, U: StringInitializable, V: StringInitializable, W: StringInitializable, X: StringInitializable>(_ w0: T.Type, _ w1: U.Type, _ w2: V.Type, _ w3: W.Type, _ w4: X.Type, handler: (Request, T, U, V, W, X) throws -> ResponseRepresentable) {
		self.add(.options, path: ":w0/:w1/:w2/:w3/:w4") { request in
			guard let vw0 = request.parameters["w0"] else {
				throw Abort.badRequest
			}
			guard let vw1 = request.parameters["w1"] else {
				throw Abort.badRequest
			}
			guard let vw2 = request.parameters["w2"] else {
				throw Abort.badRequest
			}
			guard let vw3 = request.parameters["w3"] else {
				throw Abort.badRequest
			}
			guard let vw4 = request.parameters["w4"] else {
				throw Abort.badRequest
			}

			let ew0 = try T(from: vw0)
			let ew1 = try U(from: vw1)
			let ew2 = try V(from: vw2)
			let ew3 = try W(from: vw3)
			let ew4 = try X(from: vw4)

			guard let cw0 = ew0 else {
				throw Abort.invalidParameter("w0", T.self)
			}
			guard let cw1 = ew1 else {
				throw Abort.invalidParameter("w1", U.self)
			}
			guard let cw2 = ew2 else {
				throw Abort.invalidParameter("w2", V.self)
			}
			guard let cw3 = ew3 else {
				throw Abort.invalidParameter("w3", W.self)
			}
			guard let cw4 = ew4 else {
				throw Abort.invalidParameter("w4", X.self)
			}

			return try handler(request, cw0, cw1, cw2, cw3, cw4)
		}
	}

}
